-- automatically generated by BNF Converter
module Main where


import           System.IO                      ( stdin
                                                , hGetContents
                                                )
import           System.Environment             ( getArgs
                                                , getProgName
                                                )
import           System.Exit                    ( exitFailure
                                                , exitSuccess
                                                )
import           Control.Monad                  ( when )

import           Harper.Lexer
import           Harper.Parser
import           Harper.Printer
import           Harper.Abs
import           Harper.Engine


import           ErrM
import           OutputM

type ParseFun a = [Token] -> Err a

myLLexer = myLexer

type Verbosity = Int

putStrV :: Verbosity -> String -> IO ()
putStrV v s = when (v > 1) $ putStrLn s

runFile :: Verbosity -> ParseFun (Program Pos) -> FilePath -> IO ()
runFile v p f = putStrLn f >> readFile f >>= run v p

run :: Verbosity -> ParseFun (Program Pos) -> String -> IO ()
run v p s =
    let ts = myLLexer s
    in  case p ts of
            Bad s -> do
                putStrLn "\nParse              Failed...\n"
                putStrV v "Tokens:"
                putStrV v $ show ts
                putStrLn s
                exitFailure
            Ok tree -> do
                putStrLn "\nParse Successful!"
                showTree v tree
                let Out out res = runInterpreter tree
                putStrLn $ out ""
                case res of
                    Ok v  -> putStrLn $ "\nExecution ended with value: " ++ show v
                    Bad s -> do
                        putStrLn $ "\nExecution terminated with an error: " ++ s
                        exitFailure

showTree :: (Show a, Print a) => Int -> a -> IO ()
showTree v tree = do
    putStrV v $ "\n[Abstract Syntax]\n\n" ++ show tree
    putStrV v $ "\n[Linearized tree]\n\n" ++ printTree tree

usage :: IO ()
usage = do
    putStrLn $ unlines
        [ "usage: Call with one of the following argument combinations:"
        , "  --help          Display this help message."
        , "  (no arguments)  Parse stdin verbosely."
        , "  (files)         Parse content of files verbosely."
        , "  -s (files)      Silent mode. Parse content of files silently."
        ]
    exitFailure

main :: IO ()
main = do
    args <- getArgs
    case args of
        ["--help"] -> usage
        []         -> getContents >>= run 2 pProgram
        "-s" : fs  -> mapM_ (runFile 0 pProgram) fs
        fs         -> mapM_ (runFile 2 pProgram) fs





