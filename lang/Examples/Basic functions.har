fac :: Integer -> Integer;
fac n = {
  var (result :: Integer) = 1;
  var (i :: Integer) = 0;
  while i < n {
    i += 1;
    result *= i;
  }
  return result;
};

sqr :: Integer -> Integer;
sqr n = n * n;

facSqr :: Integer -> Integer;
facSqr = fac @ sqr;   // Function composition

funky :: Integer -> Integer;
funky n = {
  var (result :: Integer);  // Declaration without assignment.
                            // Introduces need for some static analysis of definite assignment.
  if n == 0 {
    result := 42;
  }
  else if n > 0 and n <= 3 {
    result := n * 42;
  }
  else if n > 0 and n <= 10 {
    result := (sqr n) * 42;
  }
  else {
    result := ((sqr @ sqr) n) * 42;
  }
  return result;
};
