// Implementation of a resizing array list.
ref RefList a = {
  // Data in ref types is different - it cannot be deconstructed.
  // These fields can only be accessed via `this.data.field`.
  data = {
    arr :: Array a;  // Array is a builtin type.
    count :: Integer;
  }

  // All ref types must have exactly one ctor that must initialize all data.
  ctor :: impure -> RefList a;
  ctor = {
    this.data.arr := Array 1 ();
    this.data.count := 0;
  };
  
  addLast :: RefList a -> impure;
  addLast a = {
    if this.mustGrow () {
      eval this.grow ();
    }
  
    eval this.data.arr.setAt this.data.count a ();
    this.data.count += 1;
  };
  
  removeLast :: RefList a -> impure;
  removeLast = {
    this.data.count -= 1;
    
    if this.mustShrink () {
      eval this.shrink ();
    }
  };
  
  iterate :: RefList a -> impure -> RefGenerator a;
  iterate = {
    var (x :: Integer) = 0;
    while x < this.data.count {
      yield this.data.arr.at x ();
      x += 1;
    }
  };
  
  mustGrow :: RefList a -> impure -> Bool;
  mustGrow = this.data.count == this.data.arr.count;
  
  mustShrink :: RefList a -> impure -> Bool;
  mustShrink = this.data.count <= 3 * this.data.arr.count / 4;
  
  grow :: RefList a -> impure;
  grow = {
    (newSize :: Integer) = this.data.arr.count * 2;
    this.data.arr := Array newSize ();
  };
  
  shrink :: RefList a -> impure;
  shrink = {
    (newSize :: Integer) = this.data.arr.count / 2;
    this.data.arr := Array newSize ();
  };
};
