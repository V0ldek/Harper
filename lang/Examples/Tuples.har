index :: Iterable a -> Iterable (a, Integer);
index xs = {
  var (i :: Integer) = 0;
  for (x :: a) in xs {
    yield (x, i);
	  i += 1;
  }
};

decimate :: Iterable a -> Integer -> Iterable a;
decimate xs n = {
  (ixs :: Iterable (a, Integer)) = index xs;
  /* A lambda expression using pattern-matching to extract from a tuple. */
  (f :: (a, Integer) -> Bool) = \(_, (i :: Integer)) => i mod n != 0;
  return filter f ixs;
};

fst :: (a, b) -> a;
fst t = match t {
  ((a :: a), _) => a
};