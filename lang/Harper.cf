-- Tokens

token UIdent (upper (letter | digit | '_')*) ;

entrypoints Program ;

-- Top level.

Prog. Program ::= [TopLvlDecl] ;

TopLvlFDecl. TopLvlDecl ::= FunDecl ;
TopLvlTHint. TopLvlDecl ::= TypeHint ;
TopLvlTDecl. TopLvlDecl ::= TypeDecl ;
terminator TopLvlDecl ";" ;

-- Types.

THint. TypeHint ::= Ident "::" TypeExpr ;

TVar.   TypeExpr2  ::= Ident ;
TCtor.  TypeExpr2  ::= UIdent ;
TPur.   TypeExpr2  ::= TypePurity ;
TUnit.  TypeExpr2  ::= "()" ;
TTup.   TypeExpr2  ::= "(" TupleType ")" ;
TAdHoc. TypeExpr2  ::= "{" [FieldTypeExpr] "}" ;
TApp.   TypeExpr1  ::= UIdent [TypeExpr2] ;
TFun.   TypeExpr  ::= TypeExpr1 "->" TypeExpr ;

separator nonempty TypeExpr2 "";
coercions TypeExpr 2 ;

TTupList. TupleType ::= TypeExpr "," TupleType ;
TTupTail. TupleType ::= TypeExpr "," TypeExpr ;

TImpure. TypePurity ::= "impure" ;
TSideE.  TypePurity ::= "sideeffect" ;

TFld. FieldTypeExpr ::= TypeHint ;
separator FieldTypeExpr "," ;

-- Functions

FDecl. FunDecl ::= Ident [FunParam] "=" FunBody ;

FParam. FunParam ::= Ident ;
separator FunParam "" ;

LamParam. LambdaParam ::= Pattern ;
separator LambdaParam "" ;

FExprBody. FunBody ::= Expression ;
FStmtBody. FunBody ::= Statement5 ;

-- Literals

BTrue.  BoolLiteral ::= "true" ;
BFalse. BoolLiteral ::= "false" ;

UnitLit. Literal ::= "()" ;
IntLit.  Literal ::= Integer ;
CharLit. Literal ::= Char ;
StrLit.  Literal ::= String ;
BoolLit. Literal ::= BoolLiteral ;

-- Qualified identifiers

Qual.     Qualifier1 ::= Ident "." ;
_.        Qualifier  ::= Qualifier1 ;
Quals.    Qualifier  ::= Qualifier Qualifier1 ;
ThisQual. Qualifier  ::= "this" "." ;
DataQual. Qualifier  ::= "this" "." "data" "." ;

-- Expressions

ThisExpr.  Expression12 ::= "this" ;

AdHocExpr. Expression11 ::= "val" "{" [AdHocFieldDecl] "}" ;
VCtorExpr. Expression11 ::= "val" UIdent "{" [FieldAss] "}" ;
TupExpr.   Expression11 ::= "(" TupleExpression ")" ;
LitExpr.   Expression11 ::= Literal ;
ObjExpr.   Expression11 ::= Ident ;
CtorExpr.  Expression11 ::= UIdent ;
QObjExpr.  Expression11 ::= Qualifier Ident ;

MatchExpr. Expression10 ::= "match" Expression11 "{" [MatchExpressionClause] "}" ;

AppExpr.   Expression9 ::= Expression9 Expression11 ;

CompExpr.  Expression8 ::= Expression8 "@" Expression9 ;

PowExpr.   Expression7 ::= Expression7 "^" Expression8 ;

MulExpr.   Expression6 ::= Expression6 "*" Expression7 ;
DivExpr.   Expression6 ::= Expression6 "/" Expression7 ;
ModExpr.   Expression6 ::= Expression6 "mod" Expression7 ;

AddExpr.   Expression5 ::= Expression5 "+" Expression6 ;
SubExpr.   Expression5 ::= Expression5 "-" Expression6 ;

NotExpr.   Expression4 ::= "not" Expression9 ;
NegExpr.   Expression4 ::= "-"   Expression9 ;

EqExpr.    Expression3 ::= Expression3 "==" Expression4 ;
NEqExpr.   Expression3 ::= Expression3 "!=" Expression4 ;
LtExpr.    Expression3 ::= Expression3 "<" Expression4 ;
GtExpr.    Expression3 ::= Expression3 ">" Expression4 ;
LEqExpr.   Expression3 ::= Expression3 "<=" Expression4 ;
GEqExpr.   Expression3 ::= Expression3 ">=" Expression4 ;

AndExpr.   Expression2 ::= Expression2 "and" Expression3 ;
OrExpr.    Expression2 ::= Expression2 "or" Expression3 ;

SeqExpr.   Expression1 ::= Expression2 "|" Expression1 ;

LamExpr.   Expression ::= "\\" [LambdaParam] "=>" FunBody ;

coercions Expression 12;

-- Tuple expressions.

TupExprList. TupleExpression ::= Expression11 "," TupleExpression ;
TupExprTail. TupleExpression ::= Expression11 "," Expression11 ;

-- Match expressions.

MatchExprClause. MatchExpressionClause ::= Pattern "=>" Expression ;
separator nonempty MatchExpressionClause "," ;

-- Value construction expressions.

DataAss. FieldAss ::= Ident "=" Expression ;
separator FieldAss "," ;

-- Statements.

EmptyStmt.       Statement5 ::= "{ }" ;
StmtBlock.       Statement5 ::= "{" [Statement] "}" ;
StmtBlockWDecls. Statement5 ::= "{" [Statement] "where" [LocalFunDecl] "}" ;

RetStmt.         Statement4 ::= "return" ";" ;
RetExprStmt.     Statement4 ::= "return" Expression ";" ;
CntStmt.         Statement4 ::= "continue" ";" ;
BrkStmt.         Statement4 ::= "break" ";" ;
YieldStmt.       Statement4 ::= "yield" Expression ";" ;
_.               Statement4 ::= Statement5 ;

MatchStmt.       Statement3 ::= "match" Expression "{" [MatchStatementClause] "}" ;
WhileStmt.       Statement3 ::= "while" Expression Statement5 ;
ForInStmt.       Statement3 ::= "for" Pattern "in" Expression Statement5 ;
CondStmt.        Statement3 ::= ConditionalStatement ;
_.               Statement3 ::= Statement4 ;

DconStmt.        Statement2 ::= Pattern "=" Expression ";" ;
DeclStmt.        Statement2 ::= LocalObjDecl1 ";" ;
_.               Statement2 ::= Statement3 ;

AssStmt.         Statement1 ::= Ident ":=" Expression ";" ;
AddStmt.         Statement1 ::= Ident "+=" Expression ";" ;
SubStmt.         Statement1 ::= Ident "-=" Expression ";" ;
MulStmt.         Statement1 ::= Ident "*=" Expression ";" ;
DivStmt.         Statement1 ::= Ident "/=" Expression ";" ;
PowStmt.         Statement1 ::= Ident "^=" Expression ";" ;
CompStmt.        Statement1 ::= Ident "@=" Expression ";" ;
QAssStmt.        Statement1 ::= Qualifier Ident ":=" Expression ";" ;
QAddStmt.        Statement1 ::= Qualifier Ident "+=" Expression ";" ;
QSubStmt.        Statement1 ::= Qualifier Ident "-=" Expression ";" ;
QMulStmt.        Statement1 ::= Qualifier Ident "*=" Expression ";" ;
QDivStmt.        Statement1 ::= Qualifier Ident "/=" Expression ";" ;
QPowStmt.        Statement1 ::= Qualifier Ident "^=" Expression ";" ;
QCompStmt.       Statement1 ::= Qualifier Ident "@=" Expression ";" ;
_.               Statement1 ::= Statement2 ;

EvalStmt.        Statement ::= "eval" Expression9 ";" ;
_.               Statement ::= Statement1 ;
separator nonempty Statement "" ;

-- Match statements.

MatchStmtClause. MatchStatementClause ::= Pattern "=>" Statement4 ;
separator nonempty MatchStatementClause "" ;

-- Conditional statements.

IfElifStmts. ConditionalStatement ::= IfStatement [ElseIfStatement] ;
IfElifElseStmts. ConditionalStatement ::= IfStatement [ElseIfStatement] ElseStatement ;

IfStmt. IfStatement ::= "if" Expression Statement5 ;
ElifStmt. ElseIfStatement ::= "else if" Expression Statement5 ;
ElseStmt. ElseStatement ::= "else" Statement5 ;

separator ElseIfStatement "" ;

-- Patterns.

PatLit.  Pattern2 ::= Literal ;
_.       Pattern1 ::= Pattern2 ;
PatDecl. Pattern1 ::= LocalObjDecl ;
PatData. Pattern1 ::= "val" "{" [FieldPattern] "}" ;
PatTup.  Pattern1 ::= "(" TuplePattern ")" ;
PatDisc. Pattern1 ::= "_" ;
_.       Pattern ::= Pattern1 ;
PatCtor. Pattern ::= UIdent "{" [FieldPattern] "}" ;

-- Tuple patterns.

PatTupList. TuplePattern ::= Pattern "," TuplePattern ;
PatTupTail. TuplePattern ::= Pattern "," Pattern ;

-- Data patterns.

PatFld. FieldPattern ::= Ident ":" Pattern ;
separator FieldPattern "," ;

-- Local declarations.

Decl.      Declaration ::= Ident ;
DeclWHint. Declaration ::= "(" TypeHint ")" ;

AdHocFld. AdHocFieldDecl ::= Declaration "=" Expression ;
terminator AdHocFieldDecl ";" ;

LocTHint. LocalFunDecl ::= TypeHint ;
LocFDecl. LocalFunDecl ::= FunDecl ;
LocVarDecl. LocalObjDecl1 ::= "var" Declaration ;
_.          LocalObjDecl ::= LocalObjDecl1 ;
LocValDecl. LocalObjDecl ::= Declaration ;

terminator nonempty LocalFunDecl ";" ;

-- Type declarations.

TSig. TypeSignature ::= UIdent [TypeParameter] ;

ValTDecl.  TypeDecl ::= "value" TypeSignature "=" "{" TypeBody "}" ;
ValTUDecl. TypeDecl ::= "value" TypeSignature "=" "{" [TypeVariantDecl] "}" ;
RefTDecl.   TypeDecl ::= "ref" TypeSignature "=" "{" TypeBody "}" ;

TParam. TypeParameter ::= Ident ;
separator TypeParameter "" ;

TVarDecl. TypeVariantDecl ::= "variant" UIdent "=" "{" TypeBody "}";
terminator nonempty TypeVariantDecl ";" ;

DataTBody. TypeBody ::= "data" "=" "{" [FieldDecl] "}" [MemberDecl] ;
TBody.     TypeBody ::= [MemberDecl] ;

TFldDecl. FieldDecl ::= TypeHint ;
terminator nonempty FieldDecl ";" ;

TMemTHint. MemberDecl ::= TypeHint ;
TMemFDecl. MemberDecl ::= FunDecl ;
terminator MemberDecl ";" ;

comment "//" ;
comment "/*" "*/" ;
