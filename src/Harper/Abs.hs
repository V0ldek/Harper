module Harper.Abs where

-- Haskell module generated by the BNF converter

type Pos = Maybe (Int, Int)

newtype Ident = Ident String deriving (Eq, Ord, Show, Read)
newtype UIdent = UIdent String deriving (Eq, Ord, Show, Read)
data Program a = Prog a [TopLvlDecl a]
  deriving (Eq, Ord, Show, Read)

instance Functor Program where
    fmap f x = case x of
        Prog a toplvldecls -> Prog (f a) (map (fmap f) toplvldecls)
data TopLvlDecl a
    = TopLvlFDecl a (FunDecl a)
    | TopLvlTHint a (TypeHint a)
    | TopLvlTDecl a (TypeDecl a)
  deriving (Eq, Ord, Show, Read)

instance Functor TopLvlDecl where
    fmap f x = case x of
        TopLvlFDecl a fundecl -> TopLvlFDecl (f a) (fmap f fundecl)
        TopLvlTHint a typehint -> TopLvlTHint (f a) (fmap f typehint)
        TopLvlTDecl a typedecl -> TopLvlTDecl (f a) (fmap f typedecl)
data TypeHint a = THint a Ident (TypeExpr a)
  deriving (Eq, Ord, Show, Read)

instance Functor TypeHint where
    fmap f x = case x of
        THint a ident typeexpr -> THint (f a) ident (fmap f typeexpr)
data Declaration a = Decl a Ident | DeclWHint a (TypeHint a)
  deriving (Eq, Ord, Show, Read)

instance Functor Declaration where
    fmap f x = case x of
        Decl a ident -> Decl (f a) ident
        DeclWHint a typehint -> DeclWHint (f a) (fmap f typehint)
data TupleType a
    = TTupList a (TypeExpr a) (TupleType a)
    | TTupTail a (TypeExpr a) (TypeExpr a)
  deriving (Eq, Ord, Show, Read)

instance Functor TupleType where
    fmap f x = case x of
        TTupList a typeexpr tupletype -> TTupList (f a) (fmap f typeexpr) (fmap f tupletype)
        TTupTail a typeexpr1 typeexpr2 -> TTupTail (f a) (fmap f typeexpr1) (fmap f typeexpr2)
data TypePurity a = TImpure a | TSideE a
  deriving (Eq, Ord, Show, Read)

instance Functor TypePurity where
    fmap f x = case x of
        TImpure a -> TImpure (f a)
        TSideE a -> TSideE (f a)
data FieldTypeExpr a = TFld a (TypeHint a)
  deriving (Eq, Ord, Show, Read)

instance Functor FieldTypeExpr where
    fmap f x = case x of
        TFld a typehint -> TFld (f a) (fmap f typehint)
data TypeExpr a
    = TVar a Ident
    | TCtor a UIdent
    | TPur a (TypePurity a)
    | TUnit a
    | TTup a (TupleType a)
    | TAdHoc a [FieldTypeExpr a]
    | TApp a (TypeExpr a) (TypeExpr a)
    | TFun a (TypeExpr a) (TypeExpr a)
  deriving (Eq, Ord, Show, Read)

instance Functor TypeExpr where
    fmap f x = case x of
        TVar a ident -> TVar (f a) ident
        TCtor a uident -> TCtor (f a) uident
        TPur a typepurity -> TPur (f a) (fmap f typepurity)
        TUnit a -> TUnit (f a)
        TTup a tupletype -> TTup (f a) (fmap f tupletype)
        TAdHoc a fieldtypeexprs -> TAdHoc (f a) (map (fmap f) fieldtypeexprs)
        TApp a typeexpr1 typeexpr2 -> TApp (f a) (fmap f typeexpr1) (fmap f typeexpr2)
        TFun a typeexpr1 typeexpr2 -> TFun (f a) (fmap f typeexpr1) (fmap f typeexpr2)
data FunDecl a = FDecl a Ident [FunArg a] (FunBody a)
  deriving (Eq, Ord, Show, Read)

instance Functor FunDecl where
    fmap f x = case x of
        FDecl a ident funargs funbody -> FDecl (f a) ident (map (fmap f) funargs) (fmap f funbody)
data FunArg a = FArg a Ident
  deriving (Eq, Ord, Show, Read)

instance Functor FunArg where
    fmap f x = case x of
        FArg a ident -> FArg (f a) ident
data LambdaArg a = LamArg a (Pattern a)
  deriving (Eq, Ord, Show, Read)

instance Functor LambdaArg where
    fmap f x = case x of
        LamArg a pattern -> LamArg (f a) (fmap f pattern)
data FunBody a = FValBody a (Value a) | FStmtBody a (Statement a)
  deriving (Eq, Ord, Show, Read)

instance Functor FunBody where
    fmap f x = case x of
        FValBody a value -> FValBody (f a) (fmap f value)
        FStmtBody a statement -> FStmtBody (f a) (fmap f statement)
data BoolLiteral a = BTrue a | BFalse a
  deriving (Eq, Ord, Show, Read)

instance Functor BoolLiteral where
    fmap f x = case x of
        BTrue a -> BTrue (f a)
        BFalse a -> BFalse (f a)
data Literal a
    = IntLit a Integer
    | CharLit a Char
    | StrLit a String
    | BoolLit a (BoolLiteral a)
  deriving (Eq, Ord, Show, Read)

instance Functor Literal where
    fmap f x = case x of
        IntLit a integer -> IntLit (f a) integer
        CharLit a char -> CharLit (f a) char
        StrLit a string -> StrLit (f a) string
        BoolLit a boolliteral -> BoolLit (f a) (fmap f boolliteral)
data TupleValue a
    = TupValList a (Value a) (TupleValue a)
    | TupValTail a (Value a) (Value a)
  deriving (Eq, Ord, Show, Read)

instance Functor TupleValue where
    fmap f x = case x of
        TupValList a value tuplevalue -> TupValList (f a) (fmap f value) (fmap f tuplevalue)
        TupValTail a value1 value2 -> TupValTail (f a) (fmap f value1) (fmap f value2)
data Qualifier a
    = Qual a Ident
    | Quals a (Qualifier a) (Qualifier a)
    | ThisQual a
    | DataQual a
    | NewQual a
  deriving (Eq, Ord, Show, Read)

instance Functor Qualifier where
    fmap f x = case x of
        Qual a ident -> Qual (f a) ident
        Quals a qualifier1 qualifier2 -> Quals (f a) (fmap f qualifier1) (fmap f qualifier2)
        ThisQual a -> ThisQual (f a)
        DataQual a -> DataQual (f a)
        NewQual a -> NewQual (f a)
data Value a
    = ThisVal a
    | AdHocVal a [AdHocFieldDecl a]
    | VCtorVal a UIdent [FieldAss a]
    | TupVal a (TupleValue a)
    | LitVal a (Literal a)
    | ObjVal a Ident
    | CtorVal a UIdent
    | QObjVal a (Qualifier a) Ident
    | UnitVal a
    | MatchVal a (Value a) [MatchValueClause a]
    | AppVal a (Value a) (Value a)
    | CompVal a (Value a) (Value a)
    | PowVal a (Value a) (Value a)
    | MulVal a (Value a) (Value a)
    | DivVal a (Value a) (Value a)
    | ModVal a (Value a) (Value a)
    | AddVal a (Value a) (Value a)
    | SubVal a (Value a) (Value a)
    | NotVal a (Value a)
    | EqVal a (Value a) (Value a)
    | NEqVal a (Value a) (Value a)
    | LessVal a (Value a) (Value a)
    | GreaterVal a (Value a) (Value a)
    | LEqVal a (Value a) (Value a)
    | GEqVal a (Value a) (Value a)
    | AndVal a (Value a) (Value a)
    | OrVal a (Value a) (Value a)
    | LamVal a [LambdaArg a] (FunBody a)
    | SeqVal a (Value a) (Value a)
  deriving (Eq, Ord, Show, Read)

instance Functor Value where
    fmap f x = case x of
        ThisVal a -> ThisVal (f a)
        AdHocVal a adhocfielddecls -> AdHocVal (f a) (map (fmap f) adhocfielddecls)
        VCtorVal a uident fieldasss -> VCtorVal (f a) uident (map (fmap f) fieldasss)
        TupVal a tuplevalue -> TupVal (f a) (fmap f tuplevalue)
        LitVal a literal -> LitVal (f a) (fmap f literal)
        ObjVal a ident -> ObjVal (f a) ident
        CtorVal a uident -> CtorVal (f a) uident
        QObjVal a qualifier ident -> QObjVal (f a) (fmap f qualifier) ident
        UnitVal a -> UnitVal (f a)
        MatchVal a value matchvalueclauses -> MatchVal (f a) (fmap f value) (map (fmap f) matchvalueclauses)
        AppVal a value1 value2 -> AppVal (f a) (fmap f value1) (fmap f value2)
        CompVal a value1 value2 -> CompVal (f a) (fmap f value1) (fmap f value2)
        PowVal a value1 value2 -> PowVal (f a) (fmap f value1) (fmap f value2)
        MulVal a value1 value2 -> MulVal (f a) (fmap f value1) (fmap f value2)
        DivVal a value1 value2 -> DivVal (f a) (fmap f value1) (fmap f value2)
        ModVal a value1 value2 -> ModVal (f a) (fmap f value1) (fmap f value2)
        AddVal a value1 value2 -> AddVal (f a) (fmap f value1) (fmap f value2)
        SubVal a value1 value2 -> SubVal (f a) (fmap f value1) (fmap f value2)
        NotVal a value -> NotVal (f a) (fmap f value)
        EqVal a value1 value2 -> EqVal (f a) (fmap f value1) (fmap f value2)
        NEqVal a value1 value2 -> NEqVal (f a) (fmap f value1) (fmap f value2)
        LessVal a value1 value2 -> LessVal (f a) (fmap f value1) (fmap f value2)
        GreaterVal a value1 value2 -> GreaterVal (f a) (fmap f value1) (fmap f value2)
        LEqVal a value1 value2 -> LEqVal (f a) (fmap f value1) (fmap f value2)
        GEqVal a value1 value2 -> GEqVal (f a) (fmap f value1) (fmap f value2)
        AndVal a value1 value2 -> AndVal (f a) (fmap f value1) (fmap f value2)
        OrVal a value1 value2 -> OrVal (f a) (fmap f value1) (fmap f value2)
        LamVal a lambdaargs funbody -> LamVal (f a) (map (fmap f) lambdaargs) (fmap f funbody)
        SeqVal a value1 value2 -> SeqVal (f a) (fmap f value1) (fmap f value2)
data MatchValueClause a = MatchValClause a (Pattern a) (Value a)
  deriving (Eq, Ord, Show, Read)

instance Functor MatchValueClause where
    fmap f x = case x of
        MatchValClause a pattern value -> MatchValClause (f a) (fmap f pattern) (fmap f value)
data AdHocFieldDecl a = AdHocFld a (Declaration a) (Value a)
  deriving (Eq, Ord, Show, Read)

instance Functor AdHocFieldDecl where
    fmap f x = case x of
        AdHocFld a declaration value -> AdHocFld (f a) (fmap f declaration) (fmap f value)
data FieldAss a = DataAss a Ident (Value a)
  deriving (Eq, Ord, Show, Read)

instance Functor FieldAss where
    fmap f x = case x of
        DataAss a ident value -> DataAss (f a) ident (fmap f value)
data Statement a
    = EmptyStmt a
    | StmtBlock a [Statement a]
    | StmtBlockWDecls a [Statement a] [LocalFunDecl a]
    | RetStmt a
    | RetValStmt a (Value a)
    | CntStmt a
    | BrkStmt a
    | YieldStmt a (Value a)
    | MatchStmt a (Value a) [MatchStatementClause a]
    | WhileStmt a (Value a) (Statement a)
    | ForInStmt a (Pattern a) (Value a) (Statement a)
    | CondStmt a (ConditionalStatement a)
    | DconStmt a (Pattern a) (Value a)
    | DeclStmt a (LocalObjDecl a)
    | AssStmt a Ident (Value a)
    | AddStmt a Ident (Value a)
    | SubStmt a Ident (Value a)
    | MulStmt a Ident (Value a)
    | DivStmt a Ident (Value a)
    | PowStmt a Ident (Value a)
    | CompStmt a Ident (Value a)
    | QAssStmt a (Qualifier a) Ident (Value a)
    | QAddStmt a (Qualifier a) Ident (Value a)
    | QSubStmt a (Qualifier a) Ident (Value a)
    | QMulStmt a (Qualifier a) Ident (Value a)
    | QDivStmt a (Qualifier a) Ident (Value a)
    | QPowStmt a (Qualifier a) Ident (Value a)
    | QCompStmt a (Qualifier a) Ident (Value a)
    | EvalStmt a (Value a)
  deriving (Eq, Ord, Show, Read)

instance Functor Statement where
    fmap f x = case x of
        EmptyStmt a -> EmptyStmt (f a)
        StmtBlock a statements -> StmtBlock (f a) (map (fmap f) statements)
        StmtBlockWDecls a statements localfundecls -> StmtBlockWDecls (f a) (map (fmap f) statements) (map (fmap f) localfundecls)
        RetStmt a -> RetStmt (f a)
        RetValStmt a value -> RetValStmt (f a) (fmap f value)
        CntStmt a -> CntStmt (f a)
        BrkStmt a -> BrkStmt (f a)
        YieldStmt a value -> YieldStmt (f a) (fmap f value)
        MatchStmt a value matchstatementclauses -> MatchStmt (f a) (fmap f value) (map (fmap f) matchstatementclauses)
        WhileStmt a value statement -> WhileStmt (f a) (fmap f value) (fmap f statement)
        ForInStmt a pattern value statement -> ForInStmt (f a) (fmap f pattern) (fmap f value) (fmap f statement)
        CondStmt a conditionalstatement -> CondStmt (f a) (fmap f conditionalstatement)
        DconStmt a pattern value -> DconStmt (f a) (fmap f pattern) (fmap f value)
        DeclStmt a localobjdecl -> DeclStmt (f a) (fmap f localobjdecl)
        AssStmt a ident value -> AssStmt (f a) ident (fmap f value)
        AddStmt a ident value -> AddStmt (f a) ident (fmap f value)
        SubStmt a ident value -> SubStmt (f a) ident (fmap f value)
        MulStmt a ident value -> MulStmt (f a) ident (fmap f value)
        DivStmt a ident value -> DivStmt (f a) ident (fmap f value)
        PowStmt a ident value -> PowStmt (f a) ident (fmap f value)
        CompStmt a ident value -> CompStmt (f a) ident (fmap f value)
        QAssStmt a qualifier ident value -> QAssStmt (f a) (fmap f qualifier) ident (fmap f value)
        QAddStmt a qualifier ident value -> QAddStmt (f a) (fmap f qualifier) ident (fmap f value)
        QSubStmt a qualifier ident value -> QSubStmt (f a) (fmap f qualifier) ident (fmap f value)
        QMulStmt a qualifier ident value -> QMulStmt (f a) (fmap f qualifier) ident (fmap f value)
        QDivStmt a qualifier ident value -> QDivStmt (f a) (fmap f qualifier) ident (fmap f value)
        QPowStmt a qualifier ident value -> QPowStmt (f a) (fmap f qualifier) ident (fmap f value)
        QCompStmt a qualifier ident value -> QCompStmt (f a) (fmap f qualifier) ident (fmap f value)
        EvalStmt a value -> EvalStmt (f a) (fmap f value)
data MatchStatementClause a
    = MatchStmtClause a (Pattern a) (Statement a)
  deriving (Eq, Ord, Show, Read)

instance Functor MatchStatementClause where
    fmap f x = case x of
        MatchStmtClause a pattern statement -> MatchStmtClause (f a) (fmap f pattern) (fmap f statement)
data ConditionalStatement a
    = IfElifStmts a (IfStatement a) [ElseIfStatement a]
    | IfElifElseStmts a (IfStatement a) [ElseIfStatement a] (ElseStatement a)
  deriving (Eq, Ord, Show, Read)

instance Functor ConditionalStatement where
    fmap f x = case x of
        IfElifStmts a ifstatement elseifstatements -> IfElifStmts (f a) (fmap f ifstatement) (map (fmap f) elseifstatements)
        IfElifElseStmts a ifstatement elseifstatements elsestatement -> IfElifElseStmts (f a) (fmap f ifstatement) (map (fmap f) elseifstatements) (fmap f elsestatement)
data IfStatement a = IfStmt a (Value a) (Statement a)
  deriving (Eq, Ord, Show, Read)

instance Functor IfStatement where
    fmap f x = case x of
        IfStmt a value statement -> IfStmt (f a) (fmap f value) (fmap f statement)
data ElseIfStatement a = ElifStmt a (Value a) (Statement a)
  deriving (Eq, Ord, Show, Read)

instance Functor ElseIfStatement where
    fmap f x = case x of
        ElifStmt a value statement -> ElifStmt (f a) (fmap f value) (fmap f statement)
data ElseStatement a = ElseStmt a (Statement a)
  deriving (Eq, Ord, Show, Read)

instance Functor ElseStatement where
    fmap f x = case x of
        ElseStmt a statement -> ElseStmt (f a) (fmap f statement)
data VarSpecifier a = LocSVar a | LocSVal a
  deriving (Eq, Ord, Show, Read)

instance Functor VarSpecifier where
    fmap f x = case x of
        LocSVar a -> LocSVar (f a)
        LocSVal a -> LocSVal (f a)
data LocalFunDecl a
    = LocTHint a (TypeHint a) | LocFDecl a (FunDecl a)
  deriving (Eq, Ord, Show, Read)

instance Functor LocalFunDecl where
    fmap f x = case x of
        LocTHint a typehint -> LocTHint (f a) (fmap f typehint)
        LocFDecl a fundecl -> LocFDecl (f a) (fmap f fundecl)
data LocalObjDecl a = LocVDecl a (VarSpecifier a) (Declaration a)
  deriving (Eq, Ord, Show, Read)

instance Functor LocalObjDecl where
    fmap f x = case x of
        LocVDecl a varspecifier declaration -> LocVDecl (f a) (fmap f varspecifier) (fmap f declaration)
data Pattern a
    = PatDecl a (LocalObjDecl a)
    | PatData a [FieldPattern a]
    | PatTup a (TuplePattern a)
    | PatDisc a
    | PatCtor a UIdent [FieldPattern a]
  deriving (Eq, Ord, Show, Read)

instance Functor Pattern where
    fmap f x = case x of
        PatDecl a localobjdecl -> PatDecl (f a) (fmap f localobjdecl)
        PatData a fieldpatterns -> PatData (f a) (map (fmap f) fieldpatterns)
        PatTup a tuplepattern -> PatTup (f a) (fmap f tuplepattern)
        PatDisc a -> PatDisc (f a)
        PatCtor a uident fieldpatterns -> PatCtor (f a) uident (map (fmap f) fieldpatterns)
data TuplePattern a
    = PatTupList a (Pattern a) (TuplePattern a)
    | PatTupTail a (Pattern a) (Pattern a)
  deriving (Eq, Ord, Show, Read)

instance Functor TuplePattern where
    fmap f x = case x of
        PatTupList a pattern tuplepattern -> PatTupList (f a) (fmap f pattern) (fmap f tuplepattern)
        PatTupTail a pattern1 pattern2 -> PatTupTail (f a) (fmap f pattern1) (fmap f pattern2)
data FieldPattern a = PatFld a Ident (Pattern a)
  deriving (Eq, Ord, Show, Read)

instance Functor FieldPattern where
    fmap f x = case x of
        PatFld a ident pattern -> PatFld (f a) ident (fmap f pattern)
data TypeSignature a = TSig a UIdent [TypeArgument a]
  deriving (Eq, Ord, Show, Read)

instance Functor TypeSignature where
    fmap f x = case x of
        TSig a uident typearguments -> TSig (f a) uident (map (fmap f) typearguments)
data TypeDecl a
    = ValTDecl a (TypeSignature a) (TypeBody a)
    | RefTDecl a (TypeSignature a) (TypeBody a)
    | ValTUDecl a (TypeSignature a) [TypeVariantDecl a]
  deriving (Eq, Ord, Show, Read)

instance Functor TypeDecl where
    fmap f x = case x of
        ValTDecl a typesignature typebody -> ValTDecl (f a) (fmap f typesignature) (fmap f typebody)
        RefTDecl a typesignature typebody -> RefTDecl (f a) (fmap f typesignature) (fmap f typebody)
        ValTUDecl a typesignature typevariantdecls -> ValTUDecl (f a) (fmap f typesignature) (map (fmap f) typevariantdecls)
data TypeArgument a = TArg a Ident
  deriving (Eq, Ord, Show, Read)

instance Functor TypeArgument where
    fmap f x = case x of
        TArg a ident -> TArg (f a) ident
data TypeVariantDecl a = TVarDecl a UIdent (TypeBody a)
  deriving (Eq, Ord, Show, Read)

instance Functor TypeVariantDecl where
    fmap f x = case x of
        TVarDecl a uident typebody -> TVarDecl (f a) uident (fmap f typebody)
data TypeBody a
    = DataTBody a [FieldDecl a] [MemberDecl a] | TBody a [MemberDecl a]
  deriving (Eq, Ord, Show, Read)

instance Functor TypeBody where
    fmap f x = case x of
        DataTBody a fielddecls memberdecls -> DataTBody (f a) (map (fmap f) fielddecls) (map (fmap f) memberdecls)
        TBody a memberdecls -> TBody (f a) (map (fmap f) memberdecls)
data FieldDecl a = TFldDecl a (TypeHint a)
  deriving (Eq, Ord, Show, Read)

instance Functor FieldDecl where
    fmap f x = case x of
        TFldDecl a typehint -> TFldDecl (f a) (fmap f typehint)
data MemberDecl a
    = TMemTHint a (TypeHint a) | TMemFDecl a (FunDecl a)
  deriving (Eq, Ord, Show, Read)

instance Functor MemberDecl where
    fmap f x = case x of
        TMemTHint a typehint -> TMemTHint (f a) (fmap f typehint)
        TMemFDecl a fundecl -> TMemFDecl (f a) (fmap f fundecl)
