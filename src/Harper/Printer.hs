{-# OPTIONS_GHC -fno-warn-incomplete-patterns #-}
module Harper.Printer where

-- pretty-printer generated by the BNF converter

import Harper.Abs
import Data.Char


-- the top-level printing method
printTree :: Print a => a -> String
printTree = render . prt 0

type Doc = [ShowS] -> [ShowS]

doc :: ShowS -> Doc
doc = (:)

render :: Doc -> String
render d = rend 0 (map ($ "") $ d []) "" where
  rend i ss = case ss of
    "["      :ts -> showChar '[' . rend i ts
    "("      :ts -> showChar '(' . rend i ts
    "{"      :ts -> showChar '{' . new (i+1) . rend (i+1) ts
    "}" : ";":ts -> new (i-1) . space "}" . showChar ';' . new (i-1) . rend (i-1) ts
    "}"      :ts -> new (i-1) . showChar '}' . new (i-1) . rend (i-1) ts
    ";"      :ts -> showChar ';' . new i . rend i ts
    t  : "," :ts -> showString t . space "," . rend i ts
    t  : ")" :ts -> showString t . showChar ')' . rend i ts
    t  : "]" :ts -> showString t . showChar ']' . rend i ts
    t        :ts -> space t . rend i ts
    _            -> id
  new i   = showChar '\n' . replicateS (2*i) (showChar ' ') . dropWhile isSpace
  space t = showString t . (\s -> if null s then "" else ' ':s)

parenth :: Doc -> Doc
parenth ss = doc (showChar '(') . ss . doc (showChar ')')

concatS :: [ShowS] -> ShowS
concatS = foldr (.) id

concatD :: [Doc] -> Doc
concatD = foldr (.) id

replicateS :: Int -> ShowS -> ShowS
replicateS n f = concatS (replicate n f)

-- the printer class does the job
class Print a where
  prt :: Int -> a -> Doc
  prtList :: Int -> [a] -> Doc
  prtList i = concatD . map (prt i)

instance Print a => Print [a] where
  prt = prtList

instance Print Char where
  prt _ s = doc (showChar '\'' . mkEsc '\'' s . showChar '\'')
  prtList _ s = doc (showChar '"' . concatS (map (mkEsc '"') s) . showChar '"')

mkEsc :: Char -> Char -> ShowS
mkEsc q s = case s of
  _ | s == q -> showChar '\\' . showChar s
  '\\'-> showString "\\\\"
  '\n' -> showString "\\n"
  '\t' -> showString "\\t"
  _ -> showChar s

prPrec :: Int -> Int -> Doc -> Doc
prPrec i j = if j<i then parenth else id

instance Print Int where
  prt _ x = doc (shows x)

instance Print Integer where
  prt _ x = doc (shows x)


instance Print Double where
  prt _ x = doc (shows x)


instance Print Ident where
  prt _ (Ident i) = doc (showString ( i))


instance Print UIdent where
  prt _ (UIdent i) = doc (showString ( i))



instance Print (Program a) where
  prt i e = case e of
    Prog _ toplvldecls -> prPrec i 0 (concatD [prt 0 toplvldecls])

instance Print (TopLvlDecl a) where
  prt i e = case e of
    TopLvlFDecl _ fundecl -> prPrec i 0 (concatD [prt 0 fundecl])
    TopLvlTHint _ typehint -> prPrec i 0 (concatD [prt 0 typehint])
    TopLvlTDecl _ typedecl -> prPrec i 0 (concatD [prt 0 typedecl])
  prtList _ [] = (concatD [])
  prtList _ (x:xs) = (concatD [prt 0 x, doc (showString ";"), prt 0 xs])
instance Print (TypeHint a) where
  prt i e = case e of
    THint _ id typeexpr -> prPrec i 0 (concatD [prt 0 id, doc (showString "::"), prt 0 typeexpr])

instance Print (Declaration a) where
  prt i e = case e of
    Decl _ id -> prPrec i 0 (concatD [prt 0 id])
    DeclWHint _ typehint -> prPrec i 0 (concatD [prt 0 typehint])

instance Print (TupleType a) where
  prt i e = case e of
    TTupList _ typeexpr tupletype -> prPrec i 0 (concatD [prt 0 typeexpr, doc (showString ","), prt 0 tupletype])
    TTupTail _ typeexpr1 typeexpr2 -> prPrec i 0 (concatD [prt 0 typeexpr1, doc (showString ","), prt 0 typeexpr2])

instance Print (TypePurity a) where
  prt i e = case e of
    TImpure _ -> prPrec i 0 (concatD [doc (showString "impure")])
    TSideE _ -> prPrec i 0 (concatD [doc (showString "sideeffect")])

instance Print (FieldTypeExpr a) where
  prt i e = case e of
    TFld _ typehint -> prPrec i 0 (concatD [prt 0 typehint])
  prtList _ [] = (concatD [])
  prtList _ [x] = (concatD [prt 0 x])
  prtList _ (x:xs) = (concatD [prt 0 x, doc (showString ","), prt 0 xs])
instance Print (TypeExpr a) where
  prt i e = case e of
    TVar _ id -> prPrec i 4 (concatD [prt 0 id])
    TCtor _ uident -> prPrec i 4 (concatD [prt 0 uident])
    TPur _ typepurity -> prPrec i 4 (concatD [prt 0 typepurity])
    TUnit _ -> prPrec i 4 (concatD [doc (showString "()")])
    TTup _ tupletype -> prPrec i 3 (concatD [doc (showString "("), prt 0 tupletype, doc (showString ")")])
    TAdHoc _ fieldtypeexprs -> prPrec i 3 (concatD [doc (showString "{"), prt 0 fieldtypeexprs, doc (showString "}")])
    TApp _ typeexpr1 typeexpr2 -> prPrec i 2 (concatD [prt 2 typeexpr1, prt 3 typeexpr2])
    TFun _ typeexpr1 typeexpr2 -> prPrec i 1 (concatD [prt 2 typeexpr1, doc (showString "->"), prt 1 typeexpr2])

instance Print (FunDecl a) where
  prt i e = case e of
    FDecl _ id funargs funbody -> prPrec i 0 (concatD [prt 0 id, prt 0 funargs, doc (showString "="), prt 0 funbody])

instance Print (FunArg a) where
  prt i e = case e of
    FArg _ id -> prPrec i 0 (concatD [prt 0 id])
  prtList _ [] = (concatD [])
  prtList _ (x:xs) = (concatD [prt 0 x, prt 0 xs])
instance Print (LambdaArg a) where
  prt i e = case e of
    LamArg _ pattern -> prPrec i 0 (concatD [prt 0 pattern])
  prtList _ [] = (concatD [])
  prtList _ (x:xs) = (concatD [prt 0 x, prt 0 xs])
instance Print (FunBody a) where
  prt i e = case e of
    FValBody _ value -> prPrec i 0 (concatD [prt 0 value])
    FStmtBody _ statement -> prPrec i 0 (concatD [prt 0 statement])

instance Print (BoolLiteral a) where
  prt i e = case e of
    BTrue _ -> prPrec i 0 (concatD [doc (showString "true")])
    BFalse _ -> prPrec i 0 (concatD [doc (showString "false")])

instance Print (Literal a) where
  prt i e = case e of
    IntLit _ n -> prPrec i 0 (concatD [prt 0 n])
    CharLit _ c -> prPrec i 0 (concatD [prt 0 c])
    StrLit _ str -> prPrec i 0 (concatD [prt 0 str])
    BoolLit _ boolliteral -> prPrec i 0 (concatD [prt 0 boolliteral])

instance Print (TupleValue a) where
  prt i e = case e of
    TupValList _ value tuplevalue -> prPrec i 0 (concatD [prt 11 value, doc (showString ","), prt 0 tuplevalue])
    TupValTail _ value1 value2 -> prPrec i 0 (concatD [prt 11 value1, doc (showString ","), prt 11 value2])

instance Print (Qualifier a) where
  prt i e = case e of
    Qual _ id -> prPrec i 1 (concatD [prt 0 id, doc (showString ".")])
    Quals _ qualifier1 qualifier2 -> prPrec i 0 (concatD [prt 0 qualifier1, prt 1 qualifier2])
    ThisQual _ -> prPrec i 0 (concatD [doc (showString "this.")])
    DataQual _ -> prPrec i 0 (concatD [doc (showString "this.data.")])
    NewQual _ -> prPrec i 0 (concatD [doc (showString "new.")])

instance Print (Value a) where
  prt i e = case e of
    ThisVal _ -> prPrec i 12 (concatD [doc (showString "this")])
    AdHocVal _ adhocfielddecls -> prPrec i 11 (concatD [doc (showString "val"), doc (showString "{"), prt 0 adhocfielddecls, doc (showString "}")])
    VCtorVal _ uident fieldasss -> prPrec i 11 (concatD [doc (showString "val"), prt 0 uident, doc (showString "{"), prt 0 fieldasss, doc (showString "}")])
    TupVal _ tuplevalue -> prPrec i 11 (concatD [doc (showString "("), prt 0 tuplevalue, doc (showString ")")])
    LitVal _ literal -> prPrec i 11 (concatD [prt 0 literal])
    ObjVal _ id -> prPrec i 11 (concatD [prt 0 id])
    CtorVal _ uident -> prPrec i 11 (concatD [prt 0 uident])
    QObjVal _ qualifier id -> prPrec i 11 (concatD [prt 0 qualifier, prt 0 id])
    UnitVal _ -> prPrec i 11 (concatD [doc (showString "()")])
    MatchVal _ value matchvalueclauses -> prPrec i 10 (concatD [doc (showString "match"), prt 11 value, doc (showString "{"), prt 0 matchvalueclauses, doc (showString "}")])
    AppVal _ value1 value2 -> prPrec i 9 (concatD [prt 9 value1, prt 11 value2])
    CompVal _ value1 value2 -> prPrec i 8 (concatD [prt 8 value1, doc (showString "@"), prt 9 value2])
    PowVal _ value1 value2 -> prPrec i 7 (concatD [prt 7 value1, doc (showString "^"), prt 8 value2])
    MulVal _ value1 value2 -> prPrec i 6 (concatD [prt 6 value1, doc (showString "*"), prt 7 value2])
    DivVal _ value1 value2 -> prPrec i 6 (concatD [prt 6 value1, doc (showString "/"), prt 7 value2])
    ModVal _ value1 value2 -> prPrec i 6 (concatD [prt 6 value1, doc (showString "mod"), prt 7 value2])
    AddVal _ value1 value2 -> prPrec i 5 (concatD [prt 5 value1, doc (showString "+"), prt 6 value2])
    SubVal _ value1 value2 -> prPrec i 5 (concatD [prt 5 value1, doc (showString "-"), prt 6 value2])
    NotVal _ value -> prPrec i 4 (concatD [doc (showString "not"), prt 9 value])
    EqVal _ value1 value2 -> prPrec i 3 (concatD [prt 3 value1, doc (showString "=="), prt 4 value2])
    NEqVal _ value1 value2 -> prPrec i 3 (concatD [prt 3 value1, doc (showString "!="), prt 4 value2])
    LessVal _ value1 value2 -> prPrec i 3 (concatD [prt 3 value1, doc (showString "<"), prt 4 value2])
    GreaterVal _ value1 value2 -> prPrec i 3 (concatD [prt 3 value1, doc (showString ">"), prt 4 value2])
    LEqVal _ value1 value2 -> prPrec i 3 (concatD [prt 3 value1, doc (showString "<="), prt 4 value2])
    GEqVal _ value1 value2 -> prPrec i 3 (concatD [prt 3 value1, doc (showString ">="), prt 4 value2])
    AndVal _ value1 value2 -> prPrec i 2 (concatD [prt 2 value1, doc (showString "and"), prt 3 value2])
    OrVal _ value1 value2 -> prPrec i 2 (concatD [prt 2 value1, doc (showString "or"), prt 3 value2])
    LamVal _ lambdaargs funbody -> prPrec i 1 (concatD [doc (showString "\\"), prt 0 lambdaargs, doc (showString "=>"), prt 0 funbody])
    SeqVal _ value1 value2 -> prPrec i 0 (concatD [prt 1 value1, doc (showString "|"), prt 0 value2])

instance Print (MatchValueClause a) where
  prt i e = case e of
    MatchValClause _ pattern value -> prPrec i 0 (concatD [prt 0 pattern, doc (showString "=>"), prt 0 value])
  prtList _ [] = (concatD [])
  prtList _ [x] = (concatD [prt 0 x])
  prtList _ (x:xs) = (concatD [prt 0 x, doc (showString ","), prt 0 xs])
instance Print (AdHocFieldDecl a) where
  prt i e = case e of
    AdHocFld _ declaration value -> prPrec i 0 (concatD [prt 0 declaration, doc (showString "="), prt 0 value])
  prtList _ [] = (concatD [])
  prtList _ (x:xs) = (concatD [prt 0 x, doc (showString ";"), prt 0 xs])
instance Print (FieldAss a) where
  prt i e = case e of
    DataAss _ id value -> prPrec i 0 (concatD [prt 0 id, doc (showString "="), prt 0 value])
  prtList _ [] = (concatD [])
  prtList _ [x] = (concatD [prt 0 x])
  prtList _ (x:xs) = (concatD [prt 0 x, doc (showString ","), prt 0 xs])
instance Print (Statement a) where
  prt i e = case e of
    EmptyStmt _ -> prPrec i 5 (concatD [doc (showString "{"), doc (showString "}")])
    StmtBlock _ statements -> prPrec i 5 (concatD [doc (showString "{"), prt 0 statements, doc (showString "}")])
    StmtBlockWDecls _ statements localfundecls -> prPrec i 5 (concatD [doc (showString "{"), prt 0 statements, doc (showString "where"), prt 0 localfundecls, doc (showString "}")])
    RetStmt _ -> prPrec i 4 (concatD [doc (showString "return"), doc (showString ";")])
    RetValStmt _ value -> prPrec i 4 (concatD [doc (showString "return"), prt 0 value, doc (showString ";")])
    CntStmt _ -> prPrec i 4 (concatD [doc (showString "continue"), doc (showString ";")])
    BrkStmt _ -> prPrec i 4 (concatD [doc (showString "break"), doc (showString ";")])
    YieldStmt _ value -> prPrec i 4 (concatD [doc (showString "yield"), prt 0 value, doc (showString ";")])
    MatchStmt _ value matchstatementclauses -> prPrec i 3 (concatD [doc (showString "match"), prt 0 value, doc (showString "{"), prt 0 matchstatementclauses, doc (showString "}")])
    WhileStmt _ value statement -> prPrec i 3 (concatD [doc (showString "while"), prt 0 value, prt 5 statement])
    ForInStmt _ pattern value statement -> prPrec i 3 (concatD [doc (showString "for"), prt 0 pattern, doc (showString "in"), prt 0 value, prt 5 statement])
    CondStmt _ conditionalstatement -> prPrec i 3 (concatD [prt 0 conditionalstatement])
    DconStmt _ pattern value -> prPrec i 2 (concatD [prt 0 pattern, doc (showString "="), prt 0 value, doc (showString ";")])
    DeclStmt _ localobjdecl -> prPrec i 2 (concatD [prt 0 localobjdecl, doc (showString ";")])
    AssStmt _ id value -> prPrec i 1 (concatD [prt 0 id, doc (showString ":="), prt 0 value, doc (showString ";")])
    AddStmt _ id value -> prPrec i 1 (concatD [prt 0 id, doc (showString "+="), prt 0 value, doc (showString ";")])
    SubStmt _ id value -> prPrec i 1 (concatD [prt 0 id, doc (showString "-="), prt 0 value, doc (showString ";")])
    MulStmt _ id value -> prPrec i 1 (concatD [prt 0 id, doc (showString "*="), prt 0 value, doc (showString ";")])
    DivStmt _ id value -> prPrec i 1 (concatD [prt 0 id, doc (showString "/="), prt 0 value, doc (showString ";")])
    PowStmt _ id value -> prPrec i 1 (concatD [prt 0 id, doc (showString "^="), prt 0 value, doc (showString ";")])
    CompStmt _ id value -> prPrec i 1 (concatD [prt 0 id, doc (showString "@="), prt 0 value, doc (showString ";")])
    QAssStmt _ qualifier id value -> prPrec i 1 (concatD [prt 0 qualifier, prt 0 id, doc (showString ":="), prt 0 value, doc (showString ";")])
    QAddStmt _ qualifier id value -> prPrec i 1 (concatD [prt 0 qualifier, prt 0 id, doc (showString "+="), prt 0 value, doc (showString ";")])
    QSubStmt _ qualifier id value -> prPrec i 1 (concatD [prt 0 qualifier, prt 0 id, doc (showString "-="), prt 0 value, doc (showString ";")])
    QMulStmt _ qualifier id value -> prPrec i 1 (concatD [prt 0 qualifier, prt 0 id, doc (showString "*="), prt 0 value, doc (showString ";")])
    QDivStmt _ qualifier id value -> prPrec i 1 (concatD [prt 0 qualifier, prt 0 id, doc (showString "/="), prt 0 value, doc (showString ";")])
    QPowStmt _ qualifier id value -> prPrec i 1 (concatD [prt 0 qualifier, prt 0 id, doc (showString "^="), prt 0 value, doc (showString ";")])
    QCompStmt _ qualifier id value -> prPrec i 1 (concatD [prt 0 qualifier, prt 0 id, doc (showString "@="), prt 0 value, doc (showString ";")])
    EvalStmt _ value -> prPrec i 0 (concatD [doc (showString "eval"), prt 9 value, doc (showString ";")])
  prtList _ [x] = (concatD [prt 0 x])
  prtList _ (x:xs) = (concatD [prt 0 x, prt 0 xs])
instance Print (MatchStatementClause a) where
  prt i e = case e of
    MatchStmtClause _ pattern statement -> prPrec i 0 (concatD [prt 0 pattern, doc (showString "=>"), prt 4 statement])
  prtList _ [] = (concatD [])
  prtList _ (x:xs) = (concatD [prt 0 x, prt 0 xs])
instance Print (ConditionalStatement a) where
  prt i e = case e of
    IfElifStmts _ ifstatement elseifstatements -> prPrec i 0 (concatD [prt 0 ifstatement, prt 0 elseifstatements])
    IfElifElseStmts _ ifstatement elseifstatements elsestatement -> prPrec i 0 (concatD [prt 0 ifstatement, prt 0 elseifstatements, prt 0 elsestatement])

instance Print (IfStatement a) where
  prt i e = case e of
    IfStmt _ value statement -> prPrec i 0 (concatD [doc (showString "if"), prt 0 value, prt 5 statement])

instance Print (ElseIfStatement a) where
  prt i e = case e of
    ElifStmt _ value statement -> prPrec i 0 (concatD [doc (showString "else"), doc (showString "if"), prt 0 value, prt 5 statement])
  prtList _ [] = (concatD [])
  prtList _ (x:xs) = (concatD [prt 0 x, prt 0 xs])
instance Print (ElseStatement a) where
  prt i e = case e of
    ElseStmt _ statement -> prPrec i 0 (concatD [doc (showString "else"), prt 5 statement])

instance Print (VarSpecifier a) where
  prt i e = case e of
    LocSVar _ -> prPrec i 0 (concatD [doc (showString "var")])
    LocSVal _ -> prPrec i 0 (concatD [doc (showString "val")])

instance Print (LocalFunDecl a) where
  prt i e = case e of
    LocTHint _ typehint -> prPrec i 0 (concatD [prt 0 typehint])
    LocFDecl _ fundecl -> prPrec i 0 (concatD [prt 0 fundecl])
  prtList _ [x] = (concatD [prt 0 x, doc (showString ";")])
  prtList _ (x:xs) = (concatD [prt 0 x, doc (showString ";"), prt 0 xs])
instance Print (LocalObjDecl a) where
  prt i e = case e of
    LocVDecl _ varspecifier declaration -> prPrec i 0 (concatD [prt 0 varspecifier, prt 0 declaration])

instance Print (Pattern a) where
  prt i e = case e of
    PatDecl _ localobjdecl -> prPrec i 1 (concatD [prt 0 localobjdecl])
    PatData _ fieldpatterns -> prPrec i 1 (concatD [doc (showString "{"), prt 0 fieldpatterns, doc (showString "}")])
    PatTup _ tuplepattern -> prPrec i 1 (concatD [doc (showString "("), prt 0 tuplepattern, doc (showString ")")])
    PatDisc _ -> prPrec i 1 (concatD [doc (showString "_")])
    PatCtor _ uident fieldpatterns -> prPrec i 0 (concatD [prt 0 uident, doc (showString "{"), prt 0 fieldpatterns, doc (showString "}")])

instance Print (TuplePattern a) where
  prt i e = case e of
    PatTupList _ pattern tuplepattern -> prPrec i 0 (concatD [prt 0 pattern, doc (showString ","), prt 0 tuplepattern])
    PatTupTail _ pattern1 pattern2 -> prPrec i 0 (concatD [prt 0 pattern1, doc (showString ","), prt 0 pattern2])

instance Print (FieldPattern a) where
  prt i e = case e of
    PatFld _ id pattern -> prPrec i 0 (concatD [prt 0 id, doc (showString ":"), prt 0 pattern])
  prtList _ [x] = (concatD [prt 0 x])
  prtList _ (x:xs) = (concatD [prt 0 x, doc (showString ","), prt 0 xs])
instance Print (TypeSignature a) where
  prt i e = case e of
    TSig _ uident typearguments -> prPrec i 0 (concatD [prt 0 uident, prt 0 typearguments])

instance Print (TypeDecl a) where
  prt i e = case e of
    ValTDecl _ typesignature typebody -> prPrec i 0 (concatD [doc (showString "value"), prt 0 typesignature, doc (showString "="), doc (showString "{"), prt 0 typebody, doc (showString "}")])
    RefTDecl _ typesignature typebody -> prPrec i 0 (concatD [doc (showString "ref"), prt 0 typesignature, doc (showString "="), doc (showString "{"), prt 0 typebody, doc (showString "}")])
    ValTUDecl _ typesignature typevariantdecls -> prPrec i 0 (concatD [doc (showString "value"), prt 0 typesignature, doc (showString "="), doc (showString "{"), prt 0 typevariantdecls, doc (showString "}")])

instance Print (TypeArgument a) where
  prt i e = case e of
    TArg _ id -> prPrec i 0 (concatD [prt 0 id])
  prtList _ [] = (concatD [])
  prtList _ (x:xs) = (concatD [prt 0 x, prt 0 xs])
instance Print (TypeVariantDecl a) where
  prt i e = case e of
    TVarDecl _ uident typebody -> prPrec i 0 (concatD [doc (showString "variant"), prt 0 uident, doc (showString "="), doc (showString "{"), prt 0 typebody, doc (showString "}")])
  prtList _ [x] = (concatD [prt 0 x, doc (showString ";")])
  prtList _ (x:xs) = (concatD [prt 0 x, doc (showString ";"), prt 0 xs])
instance Print (TypeBody a) where
  prt i e = case e of
    DataTBody _ fielddecls memberdecls -> prPrec i 0 (concatD [doc (showString "data"), doc (showString "="), doc (showString "{"), prt 0 fielddecls, doc (showString "}"), prt 0 memberdecls])
    TBody _ memberdecls -> prPrec i 0 (concatD [prt 0 memberdecls])

instance Print (FieldDecl a) where
  prt i e = case e of
    TFldDecl _ typehint -> prPrec i 0 (concatD [prt 0 typehint])
  prtList _ [x] = (concatD [prt 0 x, doc (showString ";")])
  prtList _ (x:xs) = (concatD [prt 0 x, doc (showString ";"), prt 0 xs])
instance Print (MemberDecl a) where
  prt i e = case e of
    TMemTHint _ typehint -> prPrec i 0 (concatD [prt 0 typehint])
    TMemFDecl _ fundecl -> prPrec i 0 (concatD [prt 0 fundecl])
  prtList _ [] = (concatD [])
  prtList _ (x:xs) = (concatD [prt 0 x, doc (showString ";"), prt 0 xs])

