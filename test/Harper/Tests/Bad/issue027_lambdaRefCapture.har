ref Box a = {
  data = {
    a :: a;
  }
  ctor :: a -> impure -> Box a;
  ctor a = {
    this.data.a := a;
    return this;
  };

  get :: impure -> a;
  get = this.data.a;
  
  set :: a -> impure -> ();
  set a = {
    this.data.a := a;
  };
};

f :: Box Integer -> sideeffect -> Integer -> Integer;
f b = {
  (g :: Integer -> Integer) = (\(n :: Integer) => b.get () + n);
  eval printLn (g 10) ();
  eval b.set 42 ();
  eval printLn (g 10) ();
  return g;
};

main :: sideeffect -> ();
main = {
  (b :: Box Integer) = Box.ctor 10 ();
  (g :: Integer -> Integer) = f b ();
  eval printLn (g 10) ();
  eval b.set 100 ();
  eval printLn (g 10) ();
};