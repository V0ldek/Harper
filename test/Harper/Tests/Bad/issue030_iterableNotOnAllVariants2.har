value List a = {
  variant Empty = { 
    isEmpty :: Bool;
    isEmpty = true;
  };

  variant NonEmpty = {
    data = {
      head :: a;
      tail :: List a;
    }

    isEmpty :: Bool;
    isEmpty = false;

    iterate :: Iterator a;
    iterate = {
      var (iter :: List a) = this;
      while not iter.isEmpty {
        yield iter.head;
        iter := iter.tail;
      }
    };
  };
};

empty :: List a;
empty = val Empty {};

cons :: a -> List a -> List a;
cons a l = val NonEmpty { head = a, tail = l };

prints :: Iterable a -> sideeffect -> ();
prints source = {
  for (a :: a) in source {
    eval printLn a ();
  }
};

main :: sideeffect -> ();
main = {
  (l :: List Integer) = cons 42 | cons 17 | cons 37 empty;
  eval prints l ();
};