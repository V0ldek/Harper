value List a = {
  variant Empty = { };
  
  variant NonEmpty = {
    data = {
      head :: a;
      tail :: List a;
    }
  };
};

cons :: a -> List a -> List a;
cons x xs = val NonEmpty { head = x, tail = xs };

empty :: List a;
empty = val Empty {};

list :: List Integer;
list = cons 42 | cons 17 | cons (-3) | cons 20 empty;

length :: List a -> Integer;
length list = {
  var (result :: Integer) = 0;
  var (iter :: List a) = list;
  var (empty :: Bool) = false;

  while not empty {
    match iter {
      NonEmpty { tail: (xs :: List a) } => {
        result += 1;
        iter := xs;
      }
      Empty { } => { empty := true; }
    }
  }

  return result;
};

main :: Integer;
main = length list;