value List a = {
  variant Empty = { };
  
  variant NonEmpty = {
    data = {
      head :: a;
      tail :: List a;
    }
  };
};

cons :: a -> List a -> List a;
cons x xs = val NonEmpty { head = x, tail = xs };

empty :: List a;
empty = val Empty {};

isLegit :: List Integer -> Bool;
isLegit ns = match ns {
  NonEmpty { head: 42 } => true,
  _                     => false
};

listLegit :: List Integer;
listLegit = cons 42 listLegit;

listNotLegit1 :: List Integer;
listNotLegit2 :: List Integer;
listNotLegit1 = cons 17 | cons 42 empty;
listNotLegit2 = cons 17 | listNotLegit2;

main :: Bool;
main = isLegit listLegit and not isLegit listNotLegit1 and not isLegit listNotLegit2;