value List a = {
  variant Empty = { };
  
  variant NonEmpty = {
    data = {
      head :: a;
      tail :: List a;
    }
  };
};

cons :: a -> List a -> List a;
cons x xs = val NonEmpty { head = x, tail = xs };

empty :: List a;
empty = val Empty {};

sumList :: List Integer -> Integer;
sumList l = match l {
  NonEmpty { head: (n :: Integer), tail: (ns :: List Integer) } => n + sumList ns,
  Empty {} => 0
};

main :: Integer;
main = {
  (l :: List Integer) = cons 42 | cons 17 | cons (-3) | cons 20 empty;
  return sumList l;
};