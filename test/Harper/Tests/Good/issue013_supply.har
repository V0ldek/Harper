// This is a port of a Haskell source I once wrote as an assignment for a Haskell course.
// Find the Haskell source at the bottom.
// It's supposed to provide types of infinite streams of values and operations that consume such streams.
// Here it's used to traverse a tree and number its leaves in infix order.

value Pair a b = {
    data = {
      first :: a;
      second :: b;
    }
};

value Stream a = {
    data = {
      head :: a;
      rest :: Stream a;
    }
};

value Supply s a = {
    data = {
        runSupply :: Stream s -> Pair a (Stream s);
    }
};

value Tree a = {
    variant Branch = {
        data = {
            left :: Tree a;
            right :: Tree a;
        }
    };

    variant Leaf = {
        data = {
            a :: a;
        }
    };
};

fst :: Pair a b -> a;
fst p = match p {
    Pair { first: (x :: a) } => x
};

from :: Integer -> Stream Integer;
from n = val Stream { head = n, rest = from (n + 1) };

nats :: Stream Integer;
nats = from 0;

evalSupply :: Supply s a -> Stream s -> a;
evalSupply p s = match p {
    Supply { runSupply: (runSupply :: Stream s -> Pair a (Stream s)) } => fst | runSupply s
};

get :: Supply s s;
get = val Supply { runSupply = (\Stream { head: (a :: s), rest: (s :: Stream s) } => val Pair { first = a, second = s } ) };

fmapStream :: (a -> b) -> Stream a -> Stream b;
fmapStream f s = match s {
    Stream { head: (a :: a), rest: (s' :: Stream a) } => val Stream { head = f a, rest = fmapStream f s' }
};

fmapSupply :: (a -> b) -> Supply s a -> Supply s b;
fmapSupply f s = {
    Supply { runSupply: (ga :: Stream s -> Pair a (Stream s)) } = s;

    (ga' :: (Stream s -> Pair b (Stream s))) =
        (\(s :: Stream s) => {
            Pair { first: (a :: a), second: (s' :: Stream s) } = ga s;
            return val Pair { first = f a, second = s' };
        });

    return val Supply { runSupply = ga' };
};

pureSupply :: a -> Supply s a;
pureSupply a = val Supply { runSupply = (\(s :: Stream s) => val Pair { first = a, second = s }) };

bindSupply :: Supply s a -> (a -> Supply s b) -> Supply s b;
bindSupply s k = {
    Supply { runSupply: (fa :: Stream s -> Pair a (Stream s)) } = s;
    (fb :: Stream s -> Pair b (Stream s)) =
        (\(s :: Stream s) => {
            Pair { first: (a :: a), second: (s' :: Stream s) } = fa s;
            Supply { runSupply: (fa' :: Stream s -> Pair b (Stream s)) } = k a;
            return fa' s';
        });

    return val Supply { runSupply = fb };
};

labelTree :: Tree a -> Tree Integer;
labelTree t = evalSupply (go t) nats;

go :: Tree a -> Supply s (Tree s);
go t = match t {
        Leaf { } => fmapSupply leaf get,
        Branch { left: (l :: Tree a), right: (r :: Tree a) } =>
            bindSupply (go l) (\(l' :: Tree s) => bindSupply (go r) (\(r' :: Tree s) => pureSupply | val Branch { left = l', right = r' } ))
};

leaf :: a -> Tree a;
leaf a = val Leaf { a = a };

branch :: Tree a -> Tree a -> Tree a;
branch l r = val Branch { left = l, right = r };

tree1 :: Tree Char;
tree1 = branch
            (branch
                (leaf 'a')
                (branch
                    (leaf 'b')
                    (leaf 'c')
                )
            )
            (branch
                (branch
                    (branch
                        (branch
                            (branch
                                (leaf 'd')
                                (leaf 'e')
                            )
                            (leaf 'f')
                        )
                        (leaf 'g')
                    )
                    (leaf 'h')
                )
                (branch
                    (leaf 'i')
                    (leaf 'j')
                )
            );

main :: Tree Integer;
main = labelTree tree1;


/* Haskell code begins

infixr 5 :>
data Stream a = a :> (Stream a)

streamToList :: Stream a -> [a]
streamToList (a :> s) = a:streamToList s

instance Show a => Show (Stream a) where
  show s = "<:" ++ (concat . take 20 . streamToList) s
    where concat []     = "...:>"
          concat (a:as) = show a ++ "," ++ concat as

rep :: a -> Stream a
rep a = a :> rep a

from :: Integer -> Stream Integer
from n = n :> from (n + 1)

nats :: Stream Integer
nats = from 0


instance Functor Stream where
  fmap f (a :> s) = f a :> fmap f s

instance Applicative Stream where
  pure = rep
  (<*>) (f :> fs) (a :> as) = f a :> (fs <*> as)


newtype Supply s a = S { runSupply :: Stream s -> (a, Stream s) }

get :: Supply s s
get = S (\(a :> s) -> (a, s))

pureSupply :: a -> Supply s a
pureSupply a = S (\s -> (a, s))

mapSupply :: (a -> b) -> Supply s a -> Supply s b
mapSupply f (S ga) = S ga'
  where ga' s = let (a, s') = ga s 
                in
                (f a, s')

mapSupply2 :: (a -> b -> c) -> Supply s a -> Supply s b -> Supply s c
mapSupply2 f (S ga) (S gb) = S gc 
  where gc s = let (a, s')  = ga s
                   (b, s'') = gb s'
               in
               (f a b, s'')
 
bindSupply :: Supply s a -> (a -> Supply s b) -> Supply s b
bindSupply (S fa) k = S fb where
  fb s = let (S fa') = k a
             (a, s') = fa s
         in
         fa' s'

instance Functor (Supply s) where
  fmap = mapSupply

instance Applicative (Supply s) where
  pure = pureSupply
  (<*>) = mapSupply2 id

instance Monad (Supply s) where
  (>>=) = bindSupply

evalSupply :: Supply s a -> Stream s -> a
evalSupply p s = fst $ runSupply p s

data Tree a = Branch (Tree a) (Tree a) | Leaf a deriving (Eq, Show)

size :: Tree a -> Int
size (Leaf _) = 1
size (Branch l r) = size l + size r

toList :: Tree a -> [a]
toList (Leaf x) = [x]
toList (Branch l r) = toList l ++ toList r

labelTree :: Tree a -> Tree Integer
labelTree t = evalSupply (go t) nats
  where
    go :: Tree a -> Supply s (Tree s)
    go (Leaf x)     = Leaf <$> get
    go (Branch l r) = do
        l' <- go l
        r' <- go r
        return (Branch l' r')

Haskell code ends */