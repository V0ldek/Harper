value Bag a b c = {
  data = {
    a :: a;
    b :: b;
    c :: c;
  }
};

f :: sideeffect -> Integer;
g :: sideeffect -> Integer;
h :: sideeffect -> Integer;

f = {
   eval printLn "f!" ();
   return 17;
};
g = {
   eval printLn "g!" ();
   return 37;
};
h = {
   eval printLn "h!" ();
   return 42;
};

fun :: Integer -> Integer -> Integer -> sideeffect -> Integer;
fun x y z = {
  eval printLn "fun!" ();
  return x ^ y + 2 * z;
};

funBag :: Bag Integer Integer Integer -> sideeffect -> Integer;
funBag b = match b {
  Bag { a: (x :: Integer), b: (y :: Integer), c: (z :: Integer) } => fun x y z
};

funBag' :: Bag Integer Integer Integer -> sideeffect -> Integer;
funBag' b = {
  match b {
    Bag { a: (x :: Integer), b: (y :: Integer), c: (z :: Integer) } => {
      eval printLn "funBag' 1" ();
      (result :: Integer) = fun x y z ();
      eval printLn "funBag' 2" ();
      return result;
    }
  }
};

main :: sideeffect -> ();
main = {
  (x :: Integer) = f ();
  (y :: Integer) = g ();
  (z :: Integer) = h ();

  (bag :: Bag Integer Integer Integer) = val Bag { b = f (), c = g (), a = h () };

  eval fun x y z ();
  eval fun (f ()) (g ()) (h ()) ();
  eval fun (g ()) (h ()) (f ()) ();
  eval funBag bag ();
  eval funBag' bag ();
};