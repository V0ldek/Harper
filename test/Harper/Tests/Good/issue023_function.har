value List a = {
  variant Empty = {
    map :: (a -> b) -> List b;
    map f = val Empty { };

    reverse :: List a;
    reverse = this;
  
    prepend :: a -> List a;
    prepend a = val NonEmpty { head = a, tail = this };

    isEmpty :: Bool;
    isEmpty = true;
  };

  variant NonEmpty = {
    data = {
      head :: a;
      tail :: List a;
    }

    map :: (a -> b) -> List b;
    map f = {
      var (iter :: List a) = this;
      var (result :: List b) = val Empty {};

      while not iter.isEmpty {
        result := result.prepend | f iter.head;
        iter := iter.tail;
      }

      return result.reverse;
    };

    reverse :: List a;
    reverse = {
      var (iter :: List a) = this;
      var (result :: List a) = val Empty {};

      while not iter.isEmpty {
        result := result.prepend iter.head;
        iter := iter.tail;
      }

      return result;
    };

    prepend :: a -> List a;
    prepend a = val NonEmpty { head = a, tail = this };

    isEmpty :: Bool;
    isEmpty = false;
  };
};

cons :: a -> List a -> List a;
cons a l = l.prepend a;

value Function a b = {
  data = {
    f :: a -> b;
  }

  apply :: a -> b;
  apply a = this.f a;

  applys :: List a -> List b;
  applys l = l.map this.apply;
};

evalAll :: List (sideeffect -> a) -> sideeffect -> List a;
evalAll l = {
  var (iter :: List (sideeffect -> a)) = l;
  var (result :: List a) = val Empty {};

  while not iter.isEmpty {
    result := result.prepend | iter.head ();
    iter := iter.tail;
  }

  return result.reverse;
};

printList :: List a -> sideeffect -> ();
printList xs = {
    (f :: a -> sideeffect -> ()) = (\(x :: a) => { eval print x (); eval print " " (); });
    (g :: (a -> b) -> List b) = xs.map;
    eval evalAll (xs.map f) ();
    eval printLn "" ();
};

main :: sideeffect -> ();
main = {
  (f :: Function Integer Integer) = val Function { f = (\(n :: Integer) => n ^ 2) };
  (l :: List Integer) = cons 42 | cons 17 | cons 13 | cons (-7) | val Empty { };
  eval printList (f.applys l) ();
};