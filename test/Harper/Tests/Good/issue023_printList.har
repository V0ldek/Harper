value List a = {
  variant Empty = {
    isEmpty :: Bool;
    isEmpty = true;

    ap :: a -> List a;
    ap a = val NonEmpty { head = a, tail = this };
  };
  
  variant NonEmpty = {
    data = {
      head :: a;
      tail :: List a;
    }
    
    // Implicilty defined: head = this.data.head;
    //                     tail = this.data.tail;

    isEmpty :: Bool;
    isEmpty = false;

    ap :: a -> List a;
    ap a = val NonEmpty { head = a, tail = this };
  };
};

cons :: a -> List a -> List a;
cons x xs = val NonEmpty { head = x, tail = xs };

empty :: List a;
empty = val Empty {};

printList :: List a -> sideeffect -> ();
printList xs = {
    if xs.isEmpty {
      eval printLn "" ();
      return;
    }

    eval print xs.head ();
    eval print " " ();
    eval printList xs.tail ();
};

main :: sideeffect -> ();
main = {
  (list :: List Integer) = cons 42 | cons 17 | cons 32 empty;
  eval printList list ();
};