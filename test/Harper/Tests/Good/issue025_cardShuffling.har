value List a = {
  variant Empty = { 
    length :: Integer;
    length = 0;

    isEmpty :: Bool;
    isEmpty = true;

    insertAt :: Integer -> a -> List a;
    insertAt n a = match n {
        0 => cons a empty
    };
  };
  
  variant NonEmpty = {
    data = {
      head :: a;
      tail :: List a;
    }

    length :: Integer;
    length = 1 + this.tail.length;

    isEmpty :: Bool;
    isEmpty = false;

    at :: Integer -> a;
    at n = match n {
        0 => this.head,
        _ => this.tail.at | n - 1
    };

    insertAt :: Integer -> a -> List a;
    insertAt n a = match n {
        0 => cons a this,
        _ => cons this.head | this.tail.insertAt (n - 1) a
    };
  };
};

cons :: a -> List a -> List a;
cons x xs = val NonEmpty { head = x, tail = xs };

empty :: List a;
empty = val Empty {};

printListWith :: (a -> sideeffect -> b) -> List a -> sideeffect -> ();
printListWith printer xs = {
    if xs.isEmpty {
      eval printLn "" ();
      return;
    }

    eval printer xs.head ();
    eval printListWith printer xs.tail ();
};

// A simple linear congrugential generator of pseudorandom numbers.
ref RefLcgRng = {
    data = {
        m :: Integer;
        a :: Integer;
        c :: Integer;
        x :: Integer;
    }

    ctor :: Integer -> impure -> RefLcgRng;
    ctor seed = {
        // Parameters copied from POSIX rand48.
        this.data.m := 2 ^ 48;
        this.data.a := 25214903917;
        this.data.c := 11;
        this.data.x := seed;

        return this;
    };

    next :: impure -> Integer;
    next = {
        this.data.x := (this.data.a * this.data.x + this.data.c) mod this.data.m;

        return this.data.x;
    };

    nextInRange :: Integer -> Integer -> impure -> Integer;
    nextInRange from to = (this.next ()) mod (to - from + 1) + from;
};

value Card = {
    data = {
        value_ :: CardValue;
        color :: CardColor;
    }

    printCard :: sideeffect -> ();
    printCard = {
        eval this.value_.printValue ();
        eval print " " ();
        eval this.color.printColor ();
        eval printLn "" ();
    };
};

value CardValue = {
    data = {
        number :: Integer;
    }

    printValue :: sideeffect -> ();
    printValue = match this.number {
        14             => print "Ace",
        13             => print "King",
        12             => print "Queen",
        11             => print "Jack",
        (n :: Integer) => print n
    };
};

value CardColor = {
    variant Spades = {
        printColor :: sideeffect -> ();
        printColor = print "of Spades";
    };
    variant Clubs = {
        printColor :: sideeffect -> ();
        printColor = print "of Clubs";
    };
    variant Diamonds = {
        printColor :: sideeffect -> ();
        printColor = print "of Diamonds";
    };
    variant Hearts = {
        printColor :: sideeffect -> ();
        printColor = print "of Hearts";
    };
};

ref RefDeck = {
    data = {
        cards :: List Card;
        rng :: RefLcgRng;
    }

    ctor :: List Card -> Integer -> impure -> RefDeck;
    ctor cards seed = {
        this.data.cards := cards;
        this.data.rng := RefLcgRng.ctor seed ();

        return this;
    };

    length :: impure -> Integer;
    length = this.data.cards.length;

    shuffle :: sideeffect -> ();
    shuffle = {
        var (cards' :: List Card) = empty;
        var (iter :: List Card) = this.data.cards;
        var (n :: Integer) = 0;
        (genPos :: impure -> Integer) = (\ => this.data.rng.nextInRange 0 n ());

        while not iter.isEmpty {
            (pos :: Integer) = genPos ();
            cards' := cards'.insertAt pos iter.head;
            iter := iter.tail;
            n += 1;
        }

        this.data.cards := cards';
    };

    printDeck :: impure -> sideeffect -> ();
    printDeck = printListWith (Card.printCard) this.data.cards;
};

map :: (a -> b) -> List a -> List b;
map f l = match l {
    Empty {} => empty,
    NonEmpty {} => cons (f l.head) | map f l.tail
};

nats :: List Integer;
nats = cons 0 | map (\(n :: Integer) => n + 1) nats;

take :: Integer -> List a -> List a;
take n l = match n {
    0 => empty,
    _ => cons l.head | take (n - 1) l.tail
};

concat :: List a -> List a -> List a;
concat l1 l2 = match l1 {
    Empty {} => l2,
    NonEmpty {} => cons l1.head | concat l1.tail l2
};

cycle :: List a -> List a;
cycle l = concat l | cycle l;

repeat :: Integer -> List a -> List a;
repeat n l = match n {
    0 => empty,
    _ => concat l | repeat (n - 1) l
};

replicate :: Integer -> a -> List a;
replicate n a = match n {
    0 => empty,
    _ => cons a | replicate (n - 1) a
};

zipWith :: (a -> b -> c) -> List a -> List b -> List c;
zipWith f l1 l2 = match l1 {
    Empty {} => empty,
    NonEmpty {} => match l2 {
        Empty {} => empty,
        NonEmpty {} => cons (f l1.head l2.head) | zipWith f l1.tail l2.tail
    }
};

standardDeck :: Integer -> impure -> RefDeck;
standardDeck = {
    (values :: List CardValue) = map (\(n :: Integer) => val CardValue { number = n + 2 }) (take 13 nats);
    (consCard :: CardColor -> CardValue -> Card) = 
        (\(col :: CardColor) (val_ :: CardValue) => val Card { color = col, value_ = val_ });

    (colors :: List CardColor) = 
        concat (replicate 13 (val Hearts {}))
      | concat (replicate 13 (val Diamonds {}))
      | concat (replicate 13 (val Clubs {}))
      | concat (replicate 13 (val Spades {})) empty;

    (cards :: List Card) = take 52 | zipWith consCard colors (repeat 4 values);

    return RefDeck.ctor cards;
};

main :: sideeffect -> ();
main = {
    (deck :: RefDeck) = standardDeck 846455 ();

    eval printLn "Initial deck:" ();
    eval deck.printDeck () ();

    eval deck.shuffle ();

    eval printLn "Shuffled deck:" ();
    eval deck.printDeck () ();

    eval deck.shuffle ();

    eval printLn "Shuffled again:" ();
    eval deck.printDeck () ();
};