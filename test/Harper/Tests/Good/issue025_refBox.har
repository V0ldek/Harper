ref RefBox a = {
    data = {
        a :: a;
    }

    ctor :: a -> impure -> RefBox a;
    ctor a = {
        this.data.a := a;
    };

    get :: impure -> a;
    get = this.data.a;

    set :: a -> impure -> ();
    set a = {
        this.data.a := a;
    };
};

f :: RefBox Integer -> impure -> ();
f b = set 0 b ();

main :: sideeffect -> Integer;
main = {
    (b :: RefBox Integer) = RefBox.ctor 42 ();

    eval printLn (get b) ();     // 42

    (set17 :: impure -> ()) = set 17 b;

    eval printLn (get b) ();     // 42

    eval set17 ();

    eval printLn (get b) ();     // 17

    (b' :: RefBox Integer) = b;

    eval printLn (get b') ();    // 17

    eval set 42 b ();

    eval printLn (get b') ();    // 42
    eval printLn (get b) ();     // 42

    eval f b ();

    eval printLn (get b') ();    // 0
    eval printLn (get b) ();     // 0

    return get b ();
};