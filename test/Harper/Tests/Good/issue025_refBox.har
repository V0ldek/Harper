ref RefBox a = {
    data = {
        a :: a;
    }

    ctor :: a -> RefBox a;
    ctor a = {
        this.data.a := a;
        return this;
    };

    get :: impure -> a;
    get = this.data.a;

    set :: a -> impure -> ();
    set a = {
        this.data.a := a;
    };
};

f :: RefBox Integer -> impure -> ();
f b = RefBox.set b 0 ();

main :: sideeffect -> Integer;
main = {
    (b :: RefBox Integer) = RefBox.ctor 42;
    
    eval printLn (b.get ()) ();     // 42

    (set17 :: impure -> ()) = b.set 17;

    eval printLn (b.get ()) ();     // 42

    eval set17 ();

    eval printLn (b.get ()) ();     // 17

    (b' :: RefBox Integer) = b;

    eval printLn (b'.get ()) ();    // 17

    eval b.set 42 ();

    eval printLn (b'.get ()) ();    // 42
    eval printLn (b.get ()) ();     // 42

    eval f b ();

    eval printLn (b'.get ()) ();    // 0
    eval printLn (b.get ()) ();     // 0

    return b.get ();
};