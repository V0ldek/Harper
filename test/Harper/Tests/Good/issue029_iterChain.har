map :: (a -> b) -> RefIterator a impure -> RefIterator b impure;
map f source = {
    while source.next () {
      yield f | source.current ();
    }
};

filter :: (a -> Bool) -> RefIterator a impure -> RefIterator a impure;
filter pred source = {
    while source.next () {
      (a :: a) = source.current ();
      if pred a {
        yield a;
      }
    }
};

concatMap :: (a -> impure -> RefIterator b impure) -> RefIterator a impure -> RefIterator b impure;
concatMap f source = {
    while source.next () {
      (bs :: RefIterator b impure) = f (source.current ()) ();
      while bs.next () {
        yield bs.current ();
      }
    }
};

take :: Integer -> RefIterator a impure -> RefIterator a impure;
take n source = {
    var (i :: Integer) = n;
    while i > 0 and source.next () {
      yield source.current ();
      i -= 1;
    }
};

nats :: Iterator Integer;
nats = {
    var (i :: Integer) = 0;
    while true {
      yield i;
      i += 1;
    }
};

toRefIterator :: Iterator a -> impure -> RefIterator a impure;
toRefIterator source = {
    // Workaround - accept an impure function and never use it. See issue #30.
    (g :: impure -> a) = (\ => source.current);
    (f :: (impure -> a) -> RefIterator a impure) = (\(x :: (impure -> a)) => {
        (var (hasNext :: Bool), var (iter :: Iterator a)) = source.next;
        while hasNext {
            yield iter.current;
            ((hasNext' :: Bool), (iter' :: Iterator a)) = iter.next;
            hasNext := hasNext';
            iter := iter';
        }
    });
    return f g;
};

printIter :: RefIterator a impure -> sideeffect -> ();
printIter source = {
    while source.next () {
        eval print (source.current ()) ();
        eval print " " ();
    }
    eval printLn "" ();
};

iter :: impure -> RefIterator Integer impure;
iter = take 42 
     | filter (\(n :: Integer) => n mod 17 == 0) 
     | concatMap (\(n :: Integer) => map (\(x :: Integer) => x + n) 
     | take 10 (toRefIterator nats ())) (toRefIterator nats ());

main :: sideeffect -> ();
main = {
  eval printIter (iter ()) ();
};