ref Bag a = {
  data = {
    fst :: a;
    snd :: a;
  }

  ctor :: a -> a -> Bag a;
  ctor fst snd = {
    this.data.fst := fst;
    this.data.snd := snd;

    return this;
  };

  fst :: impure -> a;
  fst = this.data.fst;
  snd :: impure -> a;
  snd = this.data.snd;

  swap :: impure -> ();
  swap = {
    (fst :: a) = this.data.fst;
    this.data.fst := this.data.snd;
    this.data.snd := fst;
  };
};

iterate :: Bag Integer -> RefIterator Integer sideeffect;
iterate b = {
  eval printLn "Before first." ();
  yield b.fst ();
  eval printLn "After first." ();
  yield b.snd ();
  eval printLn "After second." ();
};

main :: sideeffect -> ();
main = {
  (b :: Bag Integer) = Bag.ctor 42 17;
  (iter :: RefIterator Integer sideeffect) = iterate b;

  eval printLn "Before next." ();
  eval printLn (iter.next ()) ();
  eval printLn (iter.current ()) ();
  
  eval printLn "Before mutation." ();
  eval b.swap ();
  eval printLn (iter.current ()) ();
  
  eval printLn "Before next 2." ();
  eval printLn (iter.next ()) ();
  eval printLn (iter.current ()) ();

  eval printLn "Before next 3." ();
  eval printLn (iter.next ()) ();
  eval printLn (iter.current ()) ();
};