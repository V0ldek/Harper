generate :: Integer -> Iterator Integer;
generate n = {
  var (i :: Integer) = 0;
  while i < n {
    if i == 10 {
      yield return;
    }

    yield i;

    i += 1;
  }
};

main :: sideeffect -> ();
main = {
  var (g :: Iterator Integer) = generate 42;
  var (hasNext :: Bool);
  (iterate :: impure -> ()) = (\ => {
    ((hasNext' :: Bool), (g' :: Iterator Integer)) = g.next;
    g := g';
    hasNext := hasNext';
  });
  eval iterate ();
  while hasNext {
    eval printLn g.current ();
    eval iterate ();
  }
};