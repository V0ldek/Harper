empty :: Iterator a;
empty = {
  yield return;
};

singleton :: a -> Iterator a;
singleton a = {
  yield a;
};

map :: (a -> b) -> Iterable a -> Iterator b;
map f source = {
  for (a :: a) in source {
    yield f a;
  }
};

filter :: (a -> Bool) -> Iterable a -> Iterator a;
filter pred source = {
  for (a :: a) in source {
    if pred a {
      yield a;
    }
  }
};

concatMap :: (a -> Iterable b) -> Iterable a -> Iterator b;
concatMap f source = {
  for (a :: a) in source {
    for (b :: b) in f a {
      yield b;
    }
  }
};

take :: Integer -> Iterable a -> Iterator a;
take n source = {
  if n <= 0 {
    yield return;
  }
  var (i :: Integer) = n;
  for (a :: a) in source {
    if i <= 0 {
      yield return;
    }
    yield a;
    i -= 1;
  }
};

skip :: Integer -> Iterable a -> Iterator a;
skip n source = {
  if n <= 0 {
    yield return;
  }
  var (i :: Integer) = 0;
  for (a :: a) in source {
    if i < n {
      i += 1;
    }
    else {
      yield a;
    }
  }
};

longerThan :: Integer -> Iterable a -> Bool;
longerThan n source = {
  if n < 0 {
    return true;
  }
  var (i :: Integer) = 0;
  for _ in source {
    i += 1;
    if (i > n) {
      return true;
    }
  }
  return false;
};

nats :: Iterator Integer;
nats = {
  var (i :: Integer) = 0;
  while true {
    yield i;
    i += 1;
  }
};

natsFrom :: Integer -> Iterator Integer;
natsFrom n = map (\(x :: Integer) => n + x) nats;

smallFactors :: Integer -> Iterator Integer;
smallFactors n = filter (\(x :: Integer) => n mod x == 0) | take (sqrt n) | natsFrom 1;

sqrt :: Integer -> Integer;
sqrt n = {
  for (x :: Integer) in nats {
    if x * x > n {
      return x - 1;
    }
  }
  // Unreachable.
  return n;
};

isPrime :: Integer -> Bool;
isPrime n = n > 1 and not (longerThan 1 | smallFactors n);

prints :: Iterable a -> sideeffect -> ();
prints xs = {
  for (x :: a) in xs {
    eval printLn x ();
  }
  eval print "\n" ();
};

main :: sideeffect -> ();
main = {
  // Starting from 17, find the first prime number >= n^2 and return first 10 results.
  eval prints (
      take 10 
    | concatMap (\(n :: Integer) => 
        take 1 
      | filter isPrime 
      | natsFrom (n^2))
    | natsFrom 17
  ) ();
};