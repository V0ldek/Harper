value List a = {
  variant Empty = { 
    isEmpty :: Bool;
    isEmpty = true;

    iterate :: Iterator a;
    iterate = {
      yield return;
    };
  };

  variant NonEmpty = {
    data = {
      head :: a;
      tail :: List a;
    }

    isEmpty :: Bool;
    isEmpty = false;

    iterate :: Iterator a;
    iterate = {
      var (iter :: List a) = this;
      while not iter.isEmpty {
        yield iter.head;
        iter := iter.tail;
      }
    };
  };
};

empty :: List a;
empty = val Empty {};

cons :: a -> List a -> List a;
cons a l = val NonEmpty { head = a, tail = l };

concat :: List a -> List a -> List a;
concat l1 l2 = {
  if not l1.isEmpty {
    return cons l1.head | concat l1.tail l2;
  }
  else {
    return l2;
  }
};

cycle :: List a -> List a;
cycle l = concat l | cycle l;

take :: Integer -> Iterable a -> Iterator a;
take n source = {
  if n <= 0 {
    yield return;
  }
  var (i :: Integer) = n;
  for (a :: a) in source {
    if i <= 0 {
      yield return;
    }
    yield a;
    i -= 1;
  }
};

prints :: Iterable a -> sideeffect -> ();
prints xs = {
  for (x :: a) in xs {
    eval print x ();
    eval print " " ();
  }
  eval print "\n" ();
};

main :: sideeffect -> ();
main = {
    (l :: List Integer) = cons 42 | cons 17 | cons 13 | cons 7 empty;
    eval prints (take 20 | cycle l) ();
};