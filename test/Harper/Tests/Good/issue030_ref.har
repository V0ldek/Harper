value Nullable a = {
  variant Null = { 
    isNull :: Bool;
    isNull = true;
  };

  variant NotNull = {
    data = {
      a :: a;
    }

    isNull :: Bool;
    isNull = false;
  };
};

ref Ref a = {
  data = {
    value_ :: a;
  }

  ctor :: a -> impure -> Ref a;
  ctor a = {
    this.data.value_ := a;
    return this;
  };

  get :: impure -> a;
  get = this.data.value_;

  set :: a -> impure -> ();
  set a = {
    this.data.value_ := a;
  };
};

ref RefList a = {
  data = {
    head :: Nullable (RefListNode a);
    tail :: Nullable (RefListNode a);
  }

  ctor :: impure -> RefList a;
  ctor = {
    this.data.head := val Null { };
    this.data.tail := val Null { };
    return this;
  };

  iterate :: RefIterator (Ref a) impure;
  iterate = {
    var (iter :: Nullable (RefListNode a)) = this.data.head;

    while not iter.isNull {
      NotNull { a: (node :: RefListNode a) } = iter;
      yield node.get ();
      iter := node.next ();
    }
  };

  append :: a -> impure -> ();
  append a = {
    (newNode :: RefListNode a) = RefListNode.ctor a ();
    match this.data.tail {
      Null { } => {
        this.data.head := val NotNull { a = newNode };
      }
      NotNull { a: (tail :: RefListNode a) } => {
        eval tail.setNext newNode ();
      }
    }
    this.data.tail := val NotNull { a = newNode };
  };
};

ref RefListNode a = {
  data = {
    value_ :: Ref a;
    next :: Nullable (RefListNode a);
  }

  ctor :: a -> impure -> RefListNode a;
  ctor value_ = {
    this.data.value_ := Ref.ctor value_ ();
    this.data.next := val Null { };
    return this;
  };

  next :: impure -> Nullable (RefListNode a);
  next = this.data.next;

  setNext :: RefListNode a -> impure -> ();
  setNext node = {
    this.data.next := val NotNull { a = node };
  };

  get :: impure -> Ref a;
  get = this.data.value_;
};

incrementEach :: RefList Integer -> impure -> ();
incrementEach l = {
  for (x :: Ref Integer) in l {
    eval x.set (x.get () + 1) ();
  }
};

range :: Integer -> Integer -> impure -> RefList Integer;
range from to = {
  var (i :: Integer) = from;
  (result :: RefList Integer) = RefList.ctor ();
  while i <= to {
    eval result.append i ();
    i += 1;
  }

  return result;
};

main :: sideeffect -> ();
main = {
  (l :: RefList Integer) = range 37 42 ();

  for (x :: Ref Integer) in l {
    (n :: Integer) = x.get ();
    eval print n ();
    eval print " " ();

    eval incrementEach l ();
    if n mod 3 == 0 {
      eval l.append n ();
    }
  }
};
